/* The start of the report page. */
{{define "htmlPageStartTag"}}
  <!doctype html>
  <html><head>
    <meta http-equiv="X-UA-Compatible" content="IE=9; IE=8; IE=7; IE=EDGE" />
    <meta charset="utf-8" />
    <title>Gauge Test Results</title>
    <link rel="stylesheet" type="text/css" href="{{(toPath .BasePath "css/style.css")}}" />
  </head>
  <body>
  <main class="main-container">
  <div class="container">
{{end}}

/* The overview section of the report. Contains execution result statistics.
   Clicking on the pie chart causes the specs in sidebar to be filtered by the status. */
{{define "reportOverviewTag"}}
  <div class="report-overview {{if gt .ScenarioSummary.Failed 0}}failed{{else if gt .ScenarioSummary.Passed 0}}passed{{else}}skipped{{end}}">
    <ul class="status">
      <li><span class="value">{{.ScenarioSummary.Passed}}</span><span class="txt">Passed</span></li>
      <span class="sep"></span>
      <li><span class="value">{{.ScenarioSummary.Failed}}</span><span class="txt">Failed</span></li>
      <span class="sep"></span>
      <li><span class="value">{{.ScenarioSummary.Skipped}}</span><span class="txt">Skipped</span></li>
    </ul>
    <ul class="actions">
      <li id="collapse-all" class="chevron up" alt="collapse all scenarios" title="collapse all scenarios">&raquo;</li>
      <li id="expand-all" class="chevron down" alt="expand all scenarios" title="expand all scenarios">&raquo;</li>
    </div>
  </div>
{{end}}

/* Container to display errors in Execution hooks. Execution hooks can be at Suite/Spec or Scenario level */
{{define "hookFailureDiv"}}
  <div class="error-container failed{{if gt .TableRowIndex 0}} hidden{{end}}"{{if ne .TableRowIndex -1}} data-tablerow='{{.TableRowIndex}}'{{end}}>
    <div class="error-heading">
      <h4 class="error-message">
        {{.HookName}} Failed:<pre>{{.ErrMsg | escapeHTML | encodeNewLine}}</pre>
      </h4>
    </div>
    <div class="exception-container">
        <div class="exception">
          <pre class="stacktrace">{{.StackTrace | escapeHTML | encodeNewLine}}</pre>
        </div>
        {{if .Screenshot}}
          <div class="screenshot-container">
            <img src="data:image/png;base64,{{.Screenshot}}" class="screenshot-thumbnail" alt='screenshot'/>
          </div>
        {{end}}
    </div>
  </div>
{{end}}

/* Lists all errors in a Spec file */
{{define "specErrorDiv"}}
  <div class="error-container failed">
    <div class="error-heading">Errors:</div>
    <div class="exception-container">
      <div class="exception">
        <pre class="error">
          {{range .Errors}}
            {{.Error}}
          {{end}}
        </pre>
      </div>
    </div>
  </div>
{{end}}

/* Prints out the messages that the user may have introduces using teh Gauge.WriteMessage API */
{{define "messageDiv"}}
  {{if .}}
    <div class="message-container gauge-message">
      <div class="messages">
        {{range .}}<div class="step-message">{{. | encodeNewLine | parseMarkdown | sanitize}} </div>{{end}}
      </div>
    </div>
  {{end}}
{{end}}

/* Lists reason(s) for a spec being skipped in an execution */
{{define "skippedReasonDiv"}}
  <div class="message-container">
    <h4 class="skip-reason">Skipped Reason: {{.SkippedReason | escapeHTML }}</h4>
  </div>
{{end}}

/* Container for the spec header section. Holds the spec filename, scenario statistics etc */
{{define "specHeaderStartTag"}}
  <div class="details">
    <header>
      <div class="spec-head-wrapper {{if gt .Summary.Failed 0}}fail{{else if gt .Summary.Passed 0}}pass{{else}}skip{{end}}">
        <h3 class="spec-head" title="{{.FileName}}">{{.SpecName | escapeHTML }}</h3>
      </div>
{{end}}


/* Begin rendering Scenario. Holds Execution Status and also the table-row when rendering Table Driven Scenarios */
{{define "scenarioContainerStartDiv"}}
  <div class='scenario-container {{if eq .ExecutionStatus "pass"}}passed{{if gt .TableRowIndex 0}} hidden{{end}}'{{if ne .TableRowIndex -1}} data-tablerow='{{.TableRowIndex}}'{{end}}>
    {{else if eq .ExecutionStatus "fail"}}failed{{if gt .TableRowIndex 0}} hidden{{end}}'{{if ne .TableRowIndex -1}}  data-tablerow='{{.TableRowIndex}}'{{end}}>
    {{else}}skipped{{if gt .TableRowIndex 0}} hidden{{end}}'{{if ne .TableRowIndex -1}}  data-tablerow='{{.TableRowIndex}}'{{end}}>{{end}}
{{end}}

/* Container for Scenario Header, holds the execution time of scenario */
{{define "scenarioHeaderStartDiv"}}
  <div class="collapsible scenario-head {{.ExecutionStatus}} {{if ne .ExecutionStatus "fail"}}collapsed{{end}}">
    <h3 class="head borderBottom">{{.Heading | escapeHTML }}</h3>
{{end}}

/* renders a Table. Incase of Table-driven execution, this table appears above all scenarios.
   In case of a table parameter, this table appears as part of the Step */
{{define "specCommentsAndTableTag"}}
  {{if .Datatable}}
    <table class="data-table">
      <tr>
        <th class="no-border"></th>
        {{range .Datatable.Headers}}<th>{{. | escapeHTML }}</th>{{end}}
      </tr>
      <tbody data-rowCount={{len .Datatable.Rows}}>
        {{range $index, $row := .Datatable.Rows}}
          {{if eq $row.Result "pass"}}<tr class='row-selector passed{{if eq $index 0}} selected{{end}}' data-rowIndex='{{$index}}'><td class="no-border">P</td>
          {{else if eq $row.Result "fail"}}<tr class='row-selector failed{{if eq $index 0}} selected{{end}}' data-rowIndex='{{$index}}'><td class="no-border">F</td>
          {{else}}<tr class='row-selector skipped{{if eq $index 0}} selected{{end}}' data-rowIndex='{{$index}}'><td class="no-border">S</td>
          {{end}}
          {{range $row.Cells}}<td>{{. | escapeHTML }}</td>{{end}}
        </tr>
        {{end}}
      </tbody>
    </table>
  {{end}}
{{end}}

/* start of Concept */
{{define "conceptStartDiv"}}
  <div class='step concept collapsible collapsed'>
  {{template "stepMetaDiv" .}}
{{end}}

/* start of Step */
{{define "stepStartDiv"}}
  <div class='step'>
  {{template "stepMetaDiv" .}}
{{end}}

/* Meta information about Step/Concept. Contains ExecutionTime and Status */
{{define "stepMetaDiv"}}
  {{if eq .Result.Status "pass"}}<div class='step-info passed'>
  {{else if eq .Result.Status "fail"}}<div class='step-info failed'>
  {{else if eq .Result.Status "skip"}}<div class='step-info skipped'>
  {{else if eq .Result.Status "not executed"}}<div class='step-info not-executed'>
  {{end}}
  <ul>
    <li class='step'>
      <div class='step-txt'>
{{end}}

/* renders a table */
{{define "Table"}}<table>
  <tr>
    {{range .Table.Headers}}<th>{{. | escapeHTML }}</th>{{end}}
  </tr>
  <tbody>
    {{range .Table.Rows}}
    <tr>{{range .Cells}}<td>{{. | escapeHTML }}</td>{{end}}</tr>
    {{end}}
  </tbody>
</table>
{{end}}

/* Renders the body of a Step */
{{define "stepBodyDiv"}}
  {{range .Fragments}}
    {{if eq .FragmentKind 0}}
      <span>
        {{.Text | escapeHTML }}
      </span>
    {{else if eq .FragmentKind 1 2}}
      <span class='parameter'>"{{.Text | escapeHTML }}"</span>
    {{else if eq .FragmentKind 5}}
      <div class='inline-table'>
        <div>
          {{template "Table" .}}
        </div>
      </div>
    {{end}}
  {{end}}
  </div>
{{end}}

/* Holds the failures in a Step. Includes Stacktrace and Screenshot */
{{define "stepFailureDiv"}}
  <div class="error-container failed">
    <div class="exception-container">
        <div class="exception">
          <h4 class="error-message">
            <pre>{{.ErrorMessage | escapeHTML | encodeNewLine}}</pre>
          </h4>
          <pre class="stacktrace">{{.StackTrace | escapeHTML | encodeNewLine}}</pre>
        </div>
        {{if .Screenshot}}<div class="screenshot-container">
          <img src="data:image/png;base64,{{.Screenshot}}" class="screenshot-thumbnail" />
        </div>{{end}}
    </div>
  </div>
{{end}}

/* Load javascript in the end */
{{define "htmlPageEndWithJS"}}
    <script>
      (() => {
        let scenarios = document.getElementsByClassName("scenario-head");
        let parent = (s) => s.parentNode.getElementsByClassName('scenario-details')[0];
        let forEach = (a, fn) => Array.prototype.forEach.call(a, fn);
        forEach(scenarios, (s) => {
          s.addEventListener('click', (e) => {
            e.preventDefault();
            s.classList.toggle('collapsed');
            parent(s).classList.toggle('collapsed');
          });
        });
        forEach(document.getElementsByClassName('concept'), (c) => {
          c.addEventListener('click', (e) => {
            e.preventDefault();
            c.classList.toggle('collapsed');
            forEach(c.parentNode.getElementsByClassName('concept-steps'), (cs) => cs.classList.toggle('collapsed'));
          });
        });
        document.getElementById('expand-all').addEventListener('click', (e) => {
          e.preventDefault();
          forEach(document.getElementsByClassName("scenario-head"), (s) => {
            s.classList.remove('collapsed');
            parent(s).classList.remove('collapsed');
          });
        });
        document.getElementById('collapse-all').addEventListener('click', (e) => {
          e.preventDefault();
          forEach(document.getElementsByClassName("scenario-head"), (s) => {
            s.classList.add('collapsed');
            parent(s).classList.add('collapsed');
          });
        });
        forEach(document.getElementsByClassName('specItemsContainer'), (s) => {
          forEach(s.getElementsByClassName('row-selector'), (tr) => tr.addEventListener('click', (e) =>{
            e.preventDefault();
            forEach(s.getElementsByClassName('row-selector'), (tr) => tr.classList.remove('selected'));
            tr.classList.add('selected');
            let scenarios = s.getElementsByClassName('scenario-container');
            forEach(scenarios, (sc) => {
              if(sc.dataset.tablerow === tr.dataset.rowindex)
                sc.classList.remove('hidden');
              else
                sc.classList.add('hidden');
            });
          }));
          // show the first failure
          var failedRow = s.querySelector('.row-selector.failed');
          if(failedRow)
            failedRow.click();
        });
      })();
    </script>
    </body>
  </html>
{{end}}

/* container for a Step */
{{define "step"}}
  {{template "stepStartDiv" .}}
  {{template "stepBodyDiv" .}}
  {{if .PreHookMessages}}
    <div class="before-step">
    {{template "messageDiv" .PreHookMessages}}
    </div>
  {{end}}
  {{if .BeforeStepHookFailure}}
    {{ template "hookFailureDiv" .BeforeStepHookFailure }}
  {{end}}
  {{with .Result}}
    {{if and (and (eq .Status "fail") (ne .ErrorMessage "")) (ne .StackTrace "") }}
        {{template "stepFailureDiv" .}}
    {{end }}
  {{end}}
  {{if .AfterStepHookFailure}}
    {{ template "hookFailureDiv" .AfterStepHookFailure }}
  {{end}}
  {{if .PostHookMessages}}
    <div class="after-step">
    {{template "messageDiv" .PostHookMessages}}
    </div>
  {{end}}
	</li></ul></div></div>
  {{with .Result}}
    {{if (and (eq .Status "skip") (ne .SkippedReason "")) }}
        {{template "skippedReasonDiv" .}}
    {{end }}
  {{end}}
{{end}}

/* container for a Concept */
{{define "concept"}}
  {{template "conceptStartDiv" .ConceptStep}}
  {{template "stepBodyDiv" .ConceptStep}}
  </li></ul></div></div>
  <div class='concept-steps collapsed'>
  {{range $index, $item := .Items}}
    {{template "item" $item}}
  {{end}}
  </div>
{{end}}

/* generic container, switch based on kind */
{{define "item"}}
  {{if eq .Kind "step"}}
    {{template "step" .Step}}
  {{else if eq .Kind "concept"}}
    {{template "concept" .Concept}}
  {{end}}
{{end}}

/* container for a scenario */
{{define "scenario"}}
	{{template "scenarioContainerStartDiv" .}}
	{{template "scenarioHeaderStartDiv" .}}
	</div>
  <div class='scenario-details {{if ne .ExecutionStatus "fail"}}collapsed{{end}}'>
  {{if .PreHookMessages}}
    <div class="before-scenario">
    {{template "messageDiv" .PreHookMessages}}
    </div>
  {{end}}
	{{if .BeforeScenarioHookFailure}}
		{{template "hookFailureDiv" .BeforeScenarioHookFailure}}
	{{end}}

  {{range $i, $c := .Contexts}}
    <div class='context-step'>
      {{template "item" $c}}
    </div>
  {{end}}
  {{range $i, $item := .Items}}
    {{template "item" $item}}
  {{end}}
  {{range $i, $t := .Teardowns}}
    <div class='context-step'>
      {{template "item" $t}}
    </div>
  {{end}}

  {{if .PostHookMessages}}
    <div class="after-scenario">
    {{template "messageDiv" .PostHookMessages}}
    </div>
  {{end}}
	{{if .AfterScenarioHookFailure }}
		{{template "hookFailureDiv" .AfterScenarioHookFailure}}
	{{end}}
	</div>
  </div>
{{end}}

/* container for a specification */
{{define "spec"}}
  {{$specHeader := toSpecHeader .}}
	{{template "specHeaderStartTag" $specHeader}}
	</header>
	<div class="specItemsContainer">
	{{if containsParseErrors .Errors}}
		{{template "specErrorDiv" .}}
		</div>
	{{else}}
    {{if .PreHookMessages}}
      <div class="before-spec">
      {{template "messageDiv" .PreHookMessages}}
      </div>
    {{end}}
    {{range $index, $beforeHook := .BeforeSpecHookFailures}}
      {{template "hookFailureDiv" $beforeHook}}
    {{end}}

    <div class="content">
    {{template "specCommentsAndTableTag" .}}
      {{range $index, $scn := .Scenarios}}
        {{template "scenario" $scn}}
      {{end}}

    </div>

    {{if .PostHookMessages}}
      <div class="after-spec">
      {{template "messageDiv" .PostHookMessages}}
      </div>
    {{end}}
    {{range $index, $afterHook := .AfterSpecHookFailures}}
      {{template "hookFailureDiv" $afterHook}}
    {{end}}
    </div>
    </div>
  {{end}}
{{end}}

/* holds definition to render a Spec page */
{{define "specPage"}}
	{{$overview := (toOverview .SuiteRes .SpecRes.FileName)}}
 	</div>
	</main>
	{{template "htmlPageEndWithJS" $overview}}
{{end}}

/* holds definition to render an index page */
{{define "indexPage"}}
  <div class="banner">
    <p>This report was generated by Gauge plugin for Visual Studio Code, and is optimized for viewing within the editor</p>
    <p>Run gauge specs via command line, to get a full featured html report</p>
  </div>
	{{$overview := (toOverview . "")}}
	{{template "htmlPageStartTag" $overview}}
	{{template "reportOverviewTag" $overview}}
  {{if .PreHookMessages}}
    <div class="before-suite">
    {{template "messageDiv" .PreHookMessages}}
    </div>
  {{end}}
	{{if .BeforeSuiteHookFailure}}
    {{template "hookFailureDiv" .BeforeSuiteHookFailure}}
  {{end}}
	{{if .AfterSuiteHookFailure}}
		{{template "hookFailureDiv" .AfterSuiteHookFailure}}
	{{end}}
  {{if not .BeforeSuiteHookFailure}}
    <div class="specifications">
    {{range $index, $sr := .SpecResults}}
      {{template "spec"  $sr}}
    {{end}}
    </div>
  {{end}}
  {{if .PostHookMessages}}
    <div class="after-suite">
    {{template "messageDiv" .PostHookMessages}}
    </div>
  {{end}}
 	</div>
	</main>
	{{template "htmlPageEndWithJS" $overview}}
{{end}}

{{define "indexPageFailure"}}
  {{template "indexPage" .}}
{{end}}
